# Generated by Django 4.1.3 on 2022-11-11 01:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.IntegerField(db_column='userId', primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, db_column='userName', max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'User',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('foodid', models.IntegerField(db_column='foodId', primary_key=True, serialize=False)),
                ('foodname', models.CharField(db_column='foodName', max_length=30)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('carb', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Food',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Goalmadebyuser',
            fields=[
                ('goalid', models.IntegerField(db_column='goalId', primary_key=True, serialize=False)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('carb', models.FloatField(blank=True, null=True)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('startdate', models.DateField(blank=True, db_column='startDate', null=True)),
                ('enddate', models.DateField(blank=True, db_column='endDate', null=True)),
            ],
            options={
                'db_table': 'GoalMadeByUser',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipeid', models.IntegerField(db_column='recipeId', primary_key=True, serialize=False)),
                ('recipename', models.CharField(db_column='recipeName', max_length=255)),
            ],
            options={
                'db_table': 'Recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Weeklyplan',
            fields=[
                ('planid', models.IntegerField(db_column='planID', primary_key=True, serialize=False)),
                ('creatuserid', models.IntegerField(blank=True, db_column='creatUserId', null=True)),
                ('createusername', models.CharField(blank=True, db_column='createUserName', max_length=255, null=True)),
            ],
            options={
                'db_table': 'WeeklyPlan',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Contains',
            fields=[
                ('planid', models.OneToOneField(db_column='planId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='planner.weeklyplan')),
            ],
            options={
                'db_table': 'contains',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Createrecipe',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'createRecipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Decide',
            fields=[
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'decide',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usefood',
            fields=[
                ('recipeid', models.OneToOneField(db_column='recipeId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='planner.recipe')),
                ('weight', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'UseFood',
                'managed': False,
            },
        ),
    ]
